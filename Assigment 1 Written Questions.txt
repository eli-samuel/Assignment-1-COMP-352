#Assignment 1 COMP 352
#Eli Samuel 40122277

##Question 1
###Algorithm moveOddNumbers(arr)

    Input array arr of integers
    Output arr sorted with all the odd numbers at the end

    _Variables_
    numOdds <- 0
    num <- 0

    for i=0 to i<arr length do
        if arr[i] is odd then
            increment numOdds by 1

    for i=0 to i<arr length-numOdds do
        if arr[i] is odd then
            num <- arr[i]
            for j=0 to j<arr length-numOdds do
                arr[j] <- arr[j+1]
            arr[arr.length-1] <- num
            decrement i by 1

    print arr

_a) What is the time complexity of your algorithm, in terms of Big-O?_
Each number represents each line starting from the first variable
1
1

1+(n+1)+n
n
n

1+(n+1)+n
n
n
n(1+(n+1)+n)
n
n
n

1

7n + 2n + 2 + 2n + 2 + 2n^2 + 2n
f(n) = 2n^2 + 13n + 4
g(n) = n^2
O(n^2)

In the pseudocode, a double for loop is used = n^2 --> O(n^2)

_b) What is the space complexity of your algorithm, in terms of Big-O?_

Since the size of the array is n, and the array is made up of integers, the space complexity will be 4n or O(n).

##Question 2
###Algorithm largestAndSmallestProduct(arr)

    Input array arr of integers
    Output two largest integers, their index, and product, and the two smallest integers, their index, and product

    _Variables_
    firstMax <- arr[0]
    secondMax <- arr[1]
    maxIndex1 <- 0
    maxIndex2 <- 1

    firstMin <- arr[0]
    secondMin <- arr[1]
    minIndex1 <- 0
    minIndex2 <- 1

    for i=0 to i<arr length do
        if arr[i] is greater than firstMax then
            secondMax <- firstMax
            firstMax <- arr[i]

            maxIndex2 <- maxIndex1
            maxIndex1 <- i

        else if arr[i] is greater than secondMax then
            secondMax <- arr[i]
            maxIndex2 <- i

        if arr[i] is less than firstMin
            secondMin <- firstMin
            firstMin <- arr[i]

            minIndex2 <- minIndex1
            minIndex1 <- i

        else if arr[i] is less than secondMin
            secondMin <- arr[i]
            minIndex2 <- i

    print: "index " + maxIndex1 + " and index " + maxIndex2 + ", values " + firstMax
                + " and " + secondMax + ", their product is " + (firstMax * secondMax)

    print: "index " + minIndex1 + " and index " + minIndex2 + ", values " + firstMin
                + " and " + secondMin + ", their product is " + (firstMin * secondMin)

_a) Briefly justify the motive(s) behind your design._
Finding the max product is simply finding the two largest integers. Since all integers are greater than 0, that is simple. Similarly to the max product, the smallest product is just multiplying the two smallest integers.

_b) What is the time complexity of your solution? You must specify such complexity using the Big-O notation. Explain clearly how you obtained such complexity._

There is one for loop based on n so O(n). It does not matter what is inside the loop or how many statements there are.

O(n)

###Question 3
_a) 8000000n^2 log n + n^3 is O(n^3 log n)_
f(x) exists in O(g(x)) if there exists c, x0 > 0 such that f(x) <= c*g(x) for all x >= x0
f(n) = 8000000n^2 log n + n^3
g(n) = n^3 log n
let c = 8000001

value of n     f(n)               c*g(n)
   1            1                   0
   2            32000000log2+8      64000008log2
   3            72000000log3+27     216000027log3

8000000n^2 log n + n^3 <= (8000000+1)n^3logn = cn^3logn, for c = 8000001 when n > n0 = 1
Therefore this relationship is true.

_b) 106n^2 + 3n^7 + 5n^3 is Θ(n^3)_
f(n) = 10^6n^2 + 3n^7 + 5n^3
g(n) = n^3
let c1 = x, c2 = y

lim f(n) as n -> infinity = lim n^7
lim c*g(n) as n-> infinity = lim n^3

lim f(n)/g(n) = lim n^7/n^3 = infinity

According to the limit asymtotic theorem, f(n) is part of Ω(g(n)) therefore the statement is false

Therefore, there is no upper bound for g(n) = n^3
This relationship is false.

_c) 0.1n^3 + 0.0000005n^6 is Θ(n^3)_
f(n) = 0.1n^3 + 0.0000005n^6
g(n) = n^3
let c1 = x, c2 = y

lim f(n) as n -> infinity = lim n^6
lim c*g(n) as n-> infinity = lim n^3

lim f(n)/g(n) = lim n^6/n^3 = infinity

According to the limit asymtotic theorem, f(n) is part of Ω(g(n)) therefore the statement is false

Therefore, there is no upper bound for g(n) = n^3
This relationship is false.

_d) n^4 + 0.0000001n^3 is Ω(n^3)_
f(n) = n^4 + 0.0000001n^3
g(n) = n^3
let c = 1

value of n     f(n)               c*g(n)
   1            >1                  1
   2            >16                 8
   3            >81                 27

n^4 + 0.0000001n^3 >= (1+0.0000001)n^3 = cn^3, for c = 1.0000001 when n >= n0 = 1

For all values of n >= 1, c*g(n) > f(n), thus Ω(n^3) is true.

_e) n! is Θ(2^n)_
f(n) = n!
g(n) = 2^n
let c1 = x, c2 = y

lim f(n) as n -> infinity = lim n!
lim c*g(n) as n-> infinity = lim 2^n

lim f(n)/g(n) = lim n!/2^n = infinity

According to the limit asymtotic theorem, f(n) is part of Ω(g(n)) therefore the statement is false.

There is no upper bound for g(n) = n^3
This relationship is false.

_f) n^n is Ω(n!)_
f(n) = n^n
g(n) = n!

n^n = n * n * n ... * n
n! = n(n-1)(n-2)...2*1

n * n * n ... * n > n(n-1)(n-2)...2*1 for n>0

Thus the relationship is true.
